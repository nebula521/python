"""
假设有一百个函数需要被执行,,,
      一百个任务
      一百个子进程

进程一旦开启,占用资源,,极大的资源的浪费,,

一百个玩偶,,,一百个任务,,,,
一个人完成一个任务,一百个玩偶,,单任务
请一百个人,,,一个人完成一个任务,,,做一个玩偶.....
请十个人,,,每个人去完成十个任务,,,,,多任务,,,,即提高了效率,,也节约了资源,,比较的科学...


一百函数调用,,,,
10个进程..
"""
"""
利用进程池可以完成类似的特殊需求.......
进程池可以理解是一个容器,,,,,里面放了很多进程....10个进程
"""

import multiprocessing
import os, time, random


def demo(msg):
    """定义一个函数,一个任务"""
    t_start = time.time()  # 记录此时的时间
    print("%s开始执行,进程号为%d" % (msg, os.getpid()))  # 打印完成这个任务的此时的进程号是多少,
    # random.random()随机生成0~1之间的浮点数
    time.sleep(random.random() * 2)  # 随机数字,,让程序休眠挂起
    t_stop = time.time()  # 记录一下此时的时间
    print(msg, "执行完毕，耗时%0.2f" % (t_stop - t_start))  # 执行一个任务所用到的时间


if __name__ == '__main__':
    """程序的入口"""
    po = multiprocessing.Pool(3)  # 定义一个进程池，最大进程数3
    for i in range(1, 11):  # 一共十个任务  包前不包后
        # 实例对象.apply_async(要调用的目标,(传递给目标的参数元祖,))
        # 每次循环将会用空闲出来的子进程去调用目标
        po.apply_async(demo, (i,))  # 启动进程池里的进程去执行任务
        # t1.start() p1.start

    print("----start----")
    po.close()  # 关闭进程池，关闭后po不再接收新的请求
    po.join()  # 等待po中所有子进程执行完成，必须放在close语句之后  固定的死语法
    print("-----end-----")

"""
效果: 不管你有多少个任务,,,都由进程池里面的3个进程去进行完成
24268
11988
18496
都属于进程池里面的进程......
"""


